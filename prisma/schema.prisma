// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth 模型
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  readStatuses  ReadStatus[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// RSS 阅读器模型
model Feed {
  id            String         @id @default(cuid())
  title         String
  url           String         @unique
  description   String?
  siteUrl       String?
  imageUrl      String?
  lastFetched   DateTime?
  subscriptions Subscription[]
  items         FeedItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  feedId    String
  folder    String   @default("未分类")
  sortOrder Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feed      Feed     @relation(fields: [feedId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, feedId])
}

model FeedItem {
  id          String       @id @default(cuid())
  feedId      String
  guid        String
  title       String
  link        String
  description String?
  content     String?
  author      String?
  categories  String?
  publishedAt DateTime
  feed        Feed         @relation(fields: [feedId], references: [id], onDelete: Cascade)
  readStatus  ReadStatus[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([feedId, guid])
}

model ReadStatus {
  id         String   @id @default(cuid())
  userId     String
  feedItemId String
  isRead     Boolean  @default(false)
  isStarred  Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedItem   FeedItem @relation(fields: [feedItemId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, feedItemId])
}
